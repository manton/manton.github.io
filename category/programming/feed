<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Programming &#8211; Manton Reece</title>
	<atom:link href="http://www.manton.org/category/programming/feed" rel="self" type="application/rss+xml" />
	<link>http://www.manton.org</link>
	<description></description>
	<lastBuildDate>Tue, 13 Dec 2016 15:09:38 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Workflow update for web APIs</title>
		<link>http://www.manton.org/2016/10/workflow-update-for-web-apis.html</link>
		<pubDate>Wed, 19 Oct 2016 14:34:50 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[apis]]></category>
		<category><![CDATA[automation]]></category>
		<category><![CDATA[github]]></category>
		<category><![CDATA[web]]></category>
		<category><![CDATA[workflow]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=4384</guid>
		<description><![CDATA[Federico Viticci has an overview and examples for the latest Workflow for iOS release, which adds more advanced features for calling into web APIs. It looks great: For those who are only partially familiar with the terminology, this means that Workflow can communicate with the majority of modern services that come with a web API. [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><a href="https://www.macstories.net/ios/workflow-update-brings-ability-to-interact-with-any-web-api/">Federico Viticci has an overview</a> and examples for the latest Workflow for iOS release, which adds more advanced features for calling into web APIs. It looks great:</p>
<blockquote><p>
  For those who are only partially familiar with the terminology, this means that Workflow can communicate with the majority of modern services that come with a web API. If you&#8217;ve never worked with web APIs before, it&#8217;ll take you a few hours of reading and experiments with dictionaries, token authentications, form requests, and file uploads to get the gist of how it works. But, the Workflow team has managed to make what tends to be a visually unintuitive programming task – assembling dictionaries and structuring <a href="http://www.json.org/">JSON</a> – as simple and attractive as possible, abstracting many of the complexities that web developers have to deal with in desktop IDEs and command-line tools.
</p></blockquote>
<p>Here&#8217;s another nice example of automatically creating GitHub Gists, <a href="https://www.jordanmerrick.com/posts/workflow-and-apis/">from Jordan Merrick</a>:</p>
<blockquote><p>
  <a href="https://workflow.is/workflows/f401a725d68c476d8d95a90abcc36b5d">This is a workflow</a> I’ve always wanted to create, and the new API support makes it possible. <a href="https://gist.github.com/discover">Gists</a> are great to share small pieces of text information, such as code snippets or scripts. This action extension workflow accepts files of any type (though they must be text-based) and creates a <a href="https://gist.github.com/jordanmerrick/9f619c0aaffffd5bb46fad71e73e1477">gist</a> using the <a href="https://developer.github.com/v3/gists/">GitHub API</a>.
</p></blockquote>
<p>Workflow can now take over many web tasks that previously required either writing scripts or depending on hosted solutions like IFTTT and Zapier. Like <a href="http://www.manton.org/2016/03/blogging-your-photos.html">my workflow for posting photos to my blog</a>, it&#8217;s a natural tool for web publishing and microblogging.</p>
<p>I&#8217;d also love to see a Mac version of Workflow one day. I do some limited automation on my Mac, but AppleScript and Automator aren&#8217;t as easy to use or as well-maintained as Workflow.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Rewriting in Rails 5</title>
		<link>http://www.manton.org/2016/09/rewriting-in-rails-5.html</link>
		<pubDate>Sat, 10 Sep 2016 14:52:28 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[dhh]]></category>
		<category><![CDATA[ember]]></category>
		<category><![CDATA[frameworks]]></category>
		<category><![CDATA[javascript]]></category>
		<category><![CDATA[rails]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=4281</guid>
		<description><![CDATA[I&#8217;ve been doing Ruby on Rails work again. Although my indie web projects are all Sinatra, I generally recommend to clients that Rails is the way to go. Rails will be easier for them if someone else ever needs to take over the project. I don&#8217;t like using 2 products that do the same thing, [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I&#8217;ve been doing Ruby on Rails work again. Although my indie web projects are all Sinatra, I generally recommend to clients that Rails is the way to go. Rails will be easier for them if someone else ever needs to take over the project.</p>
<p>I don&#8217;t like using 2 products that do the same thing, though. That&#8217;s why I consolidated my web app hosting to Linode, and my source code to GitHub. Why should I switch between 2 frameworks, especially since Rails has matured so well? I&#8217;m enjoying Rails 5.</p>
<p>David Heinemeier Hansson said <a href="https://interviews.slashdot.org/story/16/08/30/1759216/the-slashdot-interview-with-ruby-on-rails-creator-david-heinemeier-hansson">in an interview on Slashdot</a>, about the rise of JavaScript front-end frameworks:</p>
<blockquote><p>
  But it seems like that&#8217;s one of the lessons people have to learn by themselves. Just try to string things together on your own a few times and you&#8217;ll quickly get an appreciation for what Rails provides as a backend framework. We&#8217;ve had tons of programmers try just that and come back for refuge.
</p></blockquote>
<p>It struck home because I&#8217;ve had some regrets with choosing Ember.js for my new app. Part of that is my own lack of experience with the framework. But also I&#8217;m no longer convinced that the heavily JavaScript-based view layout of something like Ember.js is better than <a href="https://github.com/turbolinks/turbolinks">Turbolinks</a>, for example. I plan to rewrite my app in Rails and more classic Ajax at the earliest opportunity.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Mac App Store developer survey</title>
		<link>http://www.manton.org/2016/08/mac-app-store-developer-survey.html</link>
		<pubDate>Tue, 16 Aug 2016 20:04:20 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[clipstart]]></category>
		<category><![CDATA[devmate]]></category>
		<category><![CDATA[macappstore]]></category>
		<category><![CDATA[sandboxing]]></category>
		<category><![CDATA[survey]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=4182</guid>
		<description><![CDATA[DevMate surveyed 679 Mac developers to put together a report on who is using the Mac App Store vs. selling direct, what concerns developers have, which tools they use, and more. On why developers leave the Mac App Store: If you’re thinking giving away 30% of your hard-earned revenue is the deal-breaker, you’d be surprised. [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><a href="http://devmate.com/mac-dev-survey">DevMate surveyed 679 Mac developers</a> to put together a report on who is using the Mac App Store vs. selling direct, what concerns developers have, which tools they use, and more. On why developers leave the Mac App Store:</p>
<blockquote><p>
  If you’re thinking giving away 30% of your hard-earned revenue is the deal-breaker, you’d be surprised. Revenue share is not the main reason developers flee. The main reason is the long and unclear App Review process, closely followed by revshare and the absence of trial versions.
</p></blockquote>
<p>While sandboxing does show up on the complaint list, it’s ranked low as a reason to not use the Mac App Store, even though <a href="http://www.manton.org/2012/02/sandboxing_and_clipstart.html">it was why</a> I pulled my app Clipstart from the Mac App Store 4 years ago. And not much has changed since I wrote about Sketch and other apps leaving the Mac App Store <a href="http://www.manton.org/2015/12/too-late-to-save-the-mas.html">last year</a>.</p>
<p>For anyone who has been following blog posts and conference talks about the Mac App Store, there won&#8217;t be many surprises in this new survey, but I found the details interesting. The survey appears to be a good snapshot of how the Mac community is feeling about selling software.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Swift server benchmarks</title>
		<link>http://www.manton.org/2016/06/swift-server-benchmarks.html</link>
		<pubDate>Fri, 03 Jun 2016 12:37:21 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[servers]]></category>
		<category><![CDATA[swift]]></category>
		<category><![CDATA[vapor]]></category>
		<category><![CDATA[webapps]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=3959</guid>
		<description><![CDATA[Interesting Swift web server article comparing Vapor, which I tested last week, to other web server frameworks: This first post will cover input, i.e. request data. Fetching input from a request, ensuring it is the correct type, and most importantly, not crashing. These are common tasks that most web developers deal with daily. All of [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><a href="https://medium.com/@qutheory/server-side-swift-vs-the-other-guys-1-input-ec48d7be37b7#.5mou8yl1a">Interesting Swift web server article</a> comparing Vapor, which <a href="http://www.manton.org/2016/05/core-intuition-234-and-vapor.html">I tested last week</a>, to other web server frameworks:</p>
<blockquote><p>
  This first post will cover input, i.e. request data. Fetching input from a request, ensuring it is the correct type, and most importantly, not crashing. These are common tasks that most web developers deal with daily. All of the frameworks have their own unique way of doing these tasks–Let’s see how they contrast.
</p></blockquote>
<p>There is some further discussion from fans of other languages in the comments. Overall I think the article was fair. I’m not sure about the focus on “crashing”, though. This seems like a carryover from pro-Swift arguments on the desktop or mobile, and it has less relevance on the web.</p>
<p>For some web apps, it might be fine to throw an exception on bad input data, since it’s caught automatically and returned as a 500 error. I wouldn’t call that a crash anymore than I would call it a crash for a Mac app to present a generic error dialog on unexpected errors.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Swift and sharp knives</title>
		<link>http://www.manton.org/2016/05/swift-and-sharp-knives.html</link>
		<pubDate>Mon, 23 May 2016 15:36:35 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[dhh]]></category>
		<category><![CDATA[dynamic]]></category>
		<category><![CDATA[ruby]]></category>
		<category><![CDATA[swift]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=3936</guid>
		<description><![CDATA[David Heinemeier Hansson has a great post today about Ruby’s advanced dynamic features. Some people would criticize Ruby (and Rails) for including “sharp knives in its drawer of features”, but David argues that it’s a worthwhile tradeoff to give developers such power and flexibility: There’s nothing programmatically in Ruby to stop you using its sharp [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><a href="https://m.signalvnoise.com/provide-sharp-knives-cc0a22bf7934">David Heinemeier Hansson has a great post today</a> about Ruby’s advanced dynamic features. Some people would criticize Ruby (and Rails) for including “sharp knives in its drawer of features”, but David argues that it’s a worthwhile tradeoff to give developers such power and flexibility:</p>
<blockquote><p>
  There’s nothing programmatically in Ruby to stop you using its sharp knives to cut ties with reason. We enforce such good senses by convention, by nudges, and through education. Not by banning sharp knives from the kitchen and insisting everyone use spoons to slice tomatoes.
</p></blockquote>
<p>Given the <a href="http://mjtsai.com/blog/2016/05/21/dynamic-swift-2/">recent discussions</a> from the Apple community, I couldn’t stop thinking of Swift as I read David’s post. I wouldn’t go as far as saying that Swift is a dull knife; there is a lot to like about the language, and I feel reasonably productive in it now. But David’s “paternalism” line nevertheless rings true to me, that the Swift compiler is trying to protect us from ourselves.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Apple&#8217;s mindset on Swift dynamic features</title>
		<link>http://www.manton.org/2016/05/apples-mindset-on-swift-dynamic-features.html</link>
		<pubDate>Sun, 15 May 2016 16:50:08 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[dynamic]]></category>
		<category><![CDATA[macworld]]></category>
		<category><![CDATA[nextstep]]></category>
		<category><![CDATA[objc]]></category>
		<category><![CDATA[swift]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=3927</guid>
		<description><![CDATA[I let myself go off into a bit of a Swift rant on the latest Core Intuition. I’ve been doing a lot of Swift development recently. The more I use it, the more conflicted I am. I really love some parts of the language, but it’s not what I would have asked for as a [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I let myself go off into a bit of a Swift rant on <a href="http://coreint.org/232">the latest Core Intuition</a>. I’ve been doing a lot of Swift development recently. The more I use it, the more conflicted I am. I really love some parts of the language, but it’s not what I would have asked for as a successor to Objective-C 2.0.</p>
<p>Remember when Steve Jobs came back to Apple and compared NeXTSTEP to constructing a building by starting out on the 20th floor, with so much of the foundation and common patterns already taken care of for you? Cocoa allowed apps to be built significantly faster than before. Steve said <a href="https://www.youtube.com/watch?v=4QrX047-v-s">at Macworld Expo in 1997</a> that the goal was to &#8220;eliminate 80% of the code that every developer has to write for their app.&#8221;</p>
<p>Swift is not like that. Swift’s priorities are correctness and stability. These have more indirect benefits to developer productivity than we saw going from Carbon to Cocoa.</p>
<p>When <a href="https://marco.org/2016/04/21/brent-performance">Marco Arment wrote about Swift</a> last month, he mentioned wanting a language designed for high-level apps:</p>
<blockquote><p>
  Objective-C wasn’t much better for this, but I think we could’ve done better than Swift if the most important goal in Swift was maximizing real-world developer productivity when writing modern Mac and iOS apps. Swift does a little of that, but gives up a lot to also serve lower-level, more clever, language-geekier goals.
</p></blockquote>
<p>This weekend, <a href="http://inessential.com/2016/05/14/the_tension_of_swift">Brent Simmons has a new post</a> about the loss of dynamic features in “pure” Swift:</p>
<blockquote><p>
  What makes me nervous is Swift’s emphasis on type safety and on compile-time resolution. As long as we also have what we need from Objective-C, then that’s fine — then we still get xibs and storyboards, the Responder Chain, and so on.
</p></blockquote>
<p>I hope Brent’s right that this will be a core part of Swift 4. Leaning on the Objective-C runtime feels like a temporary solution because it only exists on the Mac and iOS. Great web frameworks like Ruby on Rails, for example, can’t be built without relying on a more dynamic language. (And to me a great promise for Swift is being able to use it everywhere.)</p>
<p><a href="http://indiestack.com/2016/05/brents-swift-tension/">Daniel Jalkut followed up</a> with a more optimistic post. He thinks Apple is on top of this, even as he acknowledges the clash between existing frameworks and the new language:</p>
<blockquote><p>
  Some major design priorities of the Swift language, namely type safety and compile time dependency binding, are at odds with the design priorities of 20 years of evolution in Apple’s frameworks. How and if that disparity will be reckoned by Apple remains to be seen.
</p></blockquote>
<p>I think it’s telling that the “dynamic” keyword isn’t even mentioned in the main language guide. Anything related to Objective-C is off in a <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html#//apple_ref/doc/uid/TP40014216-CH4-ID35">separate set of documentation</a>, which includes discouraging statements such as “Requiring dynamic dispatch is rarely necessary” and “use of the performSelector APIs is discouraged”. For Swift to thrive in the future, as a great language for newcomers and long-time Mac developers, Apple will have to compromise on that mindset.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Navigation controllers on the Mac</title>
		<link>http://www.manton.org/2016/04/navigation-controllers-on-the-mac.html</link>
		<pubDate>Tue, 05 Apr 2016 15:43:47 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[chameleon]]></category>
		<category><![CDATA[ios]]></category>
		<category><![CDATA[mac]]></category>
		<category><![CDATA[navcontrollers]]></category>
		<category><![CDATA[twitterrific]]></category>
		<category><![CDATA[uikit]]></category>

		<guid isPermaLink="false">http://www.manton.org/2016/04/navigation-controllers-on-the-mac.html</guid>
		<description><![CDATA[Brent Simmons has a good post about the pros and cons of bringing UIKit to the Mac. On the differences between iOS and Mac development, though, one point did stand out for me: And there are things Macs don’t have at all — navigation controllers, for instance, since they don’t make sense in a context [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><a href="http://inessential.com/2016/04/01/uikit_for_macs">Brent Simmons has a good post</a> about the pros and cons of bringing UIKit to the Mac. On the differences between iOS and Mac development, though, one point did stand out for me:</p>
<blockquote><p>
  And there are things Macs don’t have at all — navigation controllers, for instance, since they don’t make sense in a context where you can just show the hierarchy via multiple panes.
</p></blockquote>
<p>Brent&#8217;s right that most Mac apps don&#8217;t need navigation controllers. I don&#8217;t think I&#8217;d have any use for them in my Mac app, <a href="http://www.riverfold.com/software/clipstart/">Clipstart</a>, for example. But navigation controllers are becoming more common in Mac apps, starting with Twitter apps especially. I expect an important part of Iconfactory&#8217;s work on <a href="http://chameleonproject.org/">the Chameleon framework</a> to bring Twitterrific to the Mac was supporting navigation controllers.</p>
<p>I&#8217;ll always consider myself a Mac developer first, even though most of what I do these days is on iOS and for the web. I&#8217;d definitely welcome UIKit for Mac. I&#8217;m getting closer to announcing a new iPhone app and web platform, and while I have a Mac version in development too, I can&#8217;t justify the time right now to finish it. UIKit for Mac would make that decision much easier.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Cute release notes</title>
		<link>http://www.manton.org/2016/02/cute-release-notes.html</link>
		<pubDate>Wed, 03 Feb 2016 19:42:49 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[appstore]]></category>
		<category><![CDATA[releasenotes]]></category>
		<category><![CDATA[tweetlibrary]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=3483</guid>
		<description><![CDATA[Ben Brooks takes on the trend of cute stories inside of release notes: “With disturbingly increasing frequency, companies are deciding to let their marketing departments handle their release notes instead of the engineering team or product manager.” I agree. These were fun at first, but the release notes don’t need to be entertainment. They should [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><a href="https://brooksreview.net/2016/01/release-notes/">Ben Brooks takes on</a> the trend of cute stories inside of release notes:</p>
<blockquote><p>
  “With disturbingly increasing frequency, companies are deciding to let their marketing departments handle their release notes instead of the engineering team or product manager.”
</p></blockquote>
<p>I agree. These were fun at first, but the release notes don’t need to be entertainment. They should be a summary of what changed, with bullet points for key changes. (A single “bug fixes” line is also not helpful.)</p>
<p>I personally like to start each line with a clear statement: “Fixed &lt;something&gt;” or “Added &lt;this feature&gt;” or “Improved &lt;something else&gt; by &lt;doing this&gt;”. You can see this in <a href="http://www.riverfold.com/software/tweetlibrary/releasenotes/">the history of my Tweet Library release notes</a>, for example.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Parse shutting down</title>
		<link>http://www.manton.org/2016/01/parse-shutting-down.html</link>
		<pubDate>Thu, 28 Jan 2016 23:20:48 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[databases]]></category>
		<category><![CDATA[facebook]]></category>
		<category><![CDATA[parse]]></category>
		<category><![CDATA[servers]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=3461</guid>
		<description><![CDATA[Bad news from the Parse team at Facebook today: “We have a difficult announcement to make. Beginning today we’re winding down the Parse service, and Parse will be fully retired after a year-long period ending on January 28, 2017. We’re proud that we’ve been able to help so many of you build great mobile apps, [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><a href="http://blog.parse.com/announcements/moving-on/">Bad news from the Parse team</a> at Facebook today:</p>
<blockquote><p>
  “We have a difficult announcement to make. Beginning today we’re winding down the Parse service, and Parse will be fully retired after a year-long period ending on January 28, 2017. We’re proud that we’ve been able to help so many of you build great mobile apps, but we need to focus our resources elsewhere.”
</p></blockquote>
<p>For years I had always heard great things about Parse. I eventually used it for the first time a few months ago on a client project. It’s got a well-designed API, friendly monthly pricing (free for many apps), and it seemed well supported, with new features like tvOS support and a web dashboard redesign rolling out <em>just a month ago</em>.</p>
<p>Thinking about <a href="https://twitter.com/danielpunkass/status/692845189816123392">this tweet from Daniel Jalkut</a>, I&#8217;ve always advocated for iOS developers to also be good at web services. Customers expect sync everywhere now, and you can do things with your own server that will give you an advantage over competitors who have a simpler, standalone iOS app. But being forced to migrate server data isn’t fun, especially on someone else’s schedule.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Fin and split-view for Apple TV</title>
		<link>http://www.manton.org/2016/01/fin-and-split-view-for-apple-tv.html</link>
		<pubDate>Mon, 25 Jan 2016 14:54:19 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[appletv]]></category>
		<category><![CDATA[joec]]></category>
		<category><![CDATA[splitview]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=3433</guid>
		<description><![CDATA[Joe Cieplinski ported his iPhone timer app Fin to the Apple TV: “Three weeks of spare hours here and there to get myself familiar with the HIG, the UI challenges, etc. was well worth the effort, as far as I’m concerned. And now I get to see if any of my users find the TV [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Joe Cieplinski ported his iPhone timer app Fin <a href="http://www.joecieplinski.com/blog/2016/01/25/fin-on-a-bigger-screen/">to the Apple TV</a>:</p>
<blockquote><p>
  “Three weeks of spare hours here and there to get myself familiar with the HIG, the UI challenges, etc. was well worth the effort, as far as I’m concerned. And now I get to see if any of my users find the TV app useful, or if I pick up any new attention as a result of being there.”
</p></blockquote>
<p>Hearing stories like this, and thinking about my own apps, I’m convinced that the Apple TV needs split-view support like iPad multitasking. Our apps could be off to the side of the screen while someone uses most of the TV for watching shows or running another full-screen app. Just as I suggested that <a href="http://www.manton.org/2016/01/lightweight-universal-apps.html">lightweight universal apps</a> are okay, there is a class of apps that would <em>become more useful</em> when they don’t have to monopolize the entire TV.</p>
]]></content:encoded>
			</item>
	</channel>
</rss>

<!-- Dynamic page generated in 0.308 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2016-12-13 14:00:20 -->
