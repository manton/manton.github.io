<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>lua &#8211; Manton Reece</title>
	<atom:link href="http://www.manton.org/tag/lua/feed" rel="self" type="application/rss+xml" />
	<link>http://www.manton.org</link>
	<description></description>
	<lastBuildDate>Tue, 13 Dec 2016 22:36:17 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Learning from Rails design</title>
		<link>http://www.manton.org/2007/06/learning_from_rails.html</link>
		<pubDate>Mon, 04 Jun 2007 05:46:43 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[lua]]></category>
		<category><![CDATA[objc]]></category>
		<category><![CDATA[urls]]></category>
		<category><![CDATA[wiitransfer]]></category>

		<guid isPermaLink="false">http://www.manton.org/2007/06/learning_from_rails.html</guid>
		<description><![CDATA[Since version 2.0, &#8220;Wii Transfer&#8221;:http://www.riverfold.com/software/wiitransfer/ has had a built-in web server for serving music and photos to the Nintendo Wii. The server was written in Cocoa and the code became very unwieldy as I continued to add features. Dozens of methods for processing different parts of the URL, and many if statements for conditionally branching [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Since version 2.0, &#8220;Wii Transfer&#8221;:http://www.riverfold.com/software/wiitransfer/ has had a built-in web server for serving music and photos to the Nintendo Wii. The server was written in Cocoa and the code became very unwieldy as I continued to add features. Dozens of methods for processing different parts of the URL, and many if statements for conditionally branching based on the URL, splitting the URL parameters, and more.</p>
<p>The code looked something like this (only worse):</p>
<pre><code>

if (path startsWithSubstring:@"/albums") {

[self processAlbumsRequest:path];

}

else if (path startsWithSubstring:@"/artists") {

[self processArtistsRequest:path];

}

else {

// ...

}

(void) processAlbumsRequest:(NSString *)inPath

{

// split out the parameters and request extensions from the URL path

// ...

if ([e isEqualToString:"xml"]) {

// ...

}

else if ([e isEqualToString:"html"]) {

// ...

}

}

</code></pre>
<p>Multiply that times 10 for all the different URLs that Wii Transfer knows how to process, and you can see how it worked fine for a couple simple things, but quickly became a mess as I added features.</p>
<p>For the upcoming version 2.3, I redesigned most of the URLs to follow a common structure, patterned after the default URL syntax that Rails uses: /controller/action/id. Now, instead of if statements, I dynamically route the URL requests using NSSelectorFromString() and performSelector:withObject:.</p>
<p>Consider this code (as above, simplified from the real thing):</p>
<pre><code>

// extract the values from /controller/action/id URLs

NSArray* pieces = [[path stringByDeletingPathExtension] pathComponents];

NSString* controller = [pieces objectAtIndex:1];

NSString* action = [pieces objectAtIndex:2];

NSString* param_id = [pieces objectAtIndex:3];

// call a method named controller_action, passing it the id

NSString* sel_name = [NSString stringWithFormat:@"%@_%@:", controller, action];

SEL method = NSSelectorFromString (sel_name);

[self performSelector:method withObject:param_id];

</code></pre>
<p>Now if I need to invent a new URL, say &#8220;/tracks/play/1234.mp3&#8221;, all I have to do is write the implementation for that method:</p>
<pre><code>

- (void) tracks_play:(NSString *)inParamID

{

// ...

}

</code></pre>
<p>The web request calls through to this new method without any additional glue code, in this case passing &#8220;1234&#8221; in the single parameter.</p>
<p>(The underscored method signatures aren&#8217;t very Cocoa-ish, but this is actually a plus because I can quickly spot the chunk of the controller that processes a set of requests, and I like that they read just like the URLs. I&#8217;m also currently using a single controller instead of having separate controller objects for the different types of requests, but I may expand that later.)</p>
<p>This convention has also allowed me to simplify all the URLs that Wii Transfer uses. Other examples include &#8220;/covers/search/U2&#8221; or &#8220;/artists/show/5&#8221;. I&#8217;ve eliminated a bunch of code, and it fits nicely with how I serve application resources and the start of a HTML template system.</p>
<p>Could it be taken further? Sure. I remember in the Mac OS 9 days building a web interface for a product using only compiled AppleScript scripts stored in the resource fork. Lately, folks like &#8220;Gus Mueller&#8221;:http://gusmueller.com/blog/ and Adobe&#8217;s Lightroom team have been doing interesting things with &#8220;embedding Lua&#8221;:http://www.sqlabs.net/blog/2006/01/adobe-lightroom-and-lua.html. I don&#8217;t want that level of extensibility yet, but it seems like a logical next generation when I outgrow even this new web architecture in Wii Transfer.</p>
]]></content:encoded>
			</item>
	</channel>
</rss>

<!-- Dynamic page generated in 0.239 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2016-12-13 17:22:24 -->
