<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>nextstep &#8211; Manton Reece</title>
	<atom:link href="http://www.manton.org/tag/nextstep/feed" rel="self" type="application/rss+xml" />
	<link>http://www.manton.org</link>
	<description></description>
	<lastBuildDate>Tue, 13 Dec 2016 20:30:14 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Apple&#8217;s mindset on Swift dynamic features</title>
		<link>http://www.manton.org/2016/05/apples-mindset-on-swift-dynamic-features.html</link>
		<pubDate>Sun, 15 May 2016 16:50:08 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[dynamic]]></category>
		<category><![CDATA[macworld]]></category>
		<category><![CDATA[nextstep]]></category>
		<category><![CDATA[objc]]></category>
		<category><![CDATA[swift]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=3927</guid>
		<description><![CDATA[I let myself go off into a bit of a Swift rant on the latest Core Intuition. I’ve been doing a lot of Swift development recently. The more I use it, the more conflicted I am. I really love some parts of the language, but it’s not what I would have asked for as a [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I let myself go off into a bit of a Swift rant on <a href="http://coreint.org/232">the latest Core Intuition</a>. I’ve been doing a lot of Swift development recently. The more I use it, the more conflicted I am. I really love some parts of the language, but it’s not what I would have asked for as a successor to Objective-C 2.0.</p>
<p>Remember when Steve Jobs came back to Apple and compared NeXTSTEP to constructing a building by starting out on the 20th floor, with so much of the foundation and common patterns already taken care of for you? Cocoa allowed apps to be built significantly faster than before. Steve said <a href="https://www.youtube.com/watch?v=4QrX047-v-s">at Macworld Expo in 1997</a> that the goal was to &#8220;eliminate 80% of the code that every developer has to write for their app.&#8221;</p>
<p>Swift is not like that. Swift’s priorities are correctness and stability. These have more indirect benefits to developer productivity than we saw going from Carbon to Cocoa.</p>
<p>When <a href="https://marco.org/2016/04/21/brent-performance">Marco Arment wrote about Swift</a> last month, he mentioned wanting a language designed for high-level apps:</p>
<blockquote><p>
  Objective-C wasn’t much better for this, but I think we could’ve done better than Swift if the most important goal in Swift was maximizing real-world developer productivity when writing modern Mac and iOS apps. Swift does a little of that, but gives up a lot to also serve lower-level, more clever, language-geekier goals.
</p></blockquote>
<p>This weekend, <a href="http://inessential.com/2016/05/14/the_tension_of_swift">Brent Simmons has a new post</a> about the loss of dynamic features in “pure” Swift:</p>
<blockquote><p>
  What makes me nervous is Swift’s emphasis on type safety and on compile-time resolution. As long as we also have what we need from Objective-C, then that’s fine — then we still get xibs and storyboards, the Responder Chain, and so on.
</p></blockquote>
<p>I hope Brent’s right that this will be a core part of Swift 4. Leaning on the Objective-C runtime feels like a temporary solution because it only exists on the Mac and iOS. Great web frameworks like Ruby on Rails, for example, can’t be built without relying on a more dynamic language. (And to me a great promise for Swift is being able to use it everywhere.)</p>
<p><a href="http://indiestack.com/2016/05/brents-swift-tension/">Daniel Jalkut followed up</a> with a more optimistic post. He thinks Apple is on top of this, even as he acknowledges the clash between existing frameworks and the new language:</p>
<blockquote><p>
  Some major design priorities of the Swift language, namely type safety and compile time dependency binding, are at odds with the design priorities of 20 years of evolution in Apple’s frameworks. How and if that disparity will be reckoned by Apple remains to be seen.
</p></blockquote>
<p>I think it’s telling that the “dynamic” keyword isn’t even mentioned in the main language guide. Anything related to Objective-C is off in a <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html#//apple_ref/doc/uid/TP40014216-CH4-ID35">separate set of documentation</a>, which includes discouraging statements such as “Requiring dynamic dispatch is rarely necessary” and “use of the performSelector APIs is discouraged”. For Swift to thrive in the future, as a great language for newcomers and long-time Mac developers, Apple will have to compromise on that mindset.</p>
]]></content:encoded>
			</item>
	</channel>
</rss>

<!-- Dynamic page generated in 0.231 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2016-12-13 15:07:22 -->
