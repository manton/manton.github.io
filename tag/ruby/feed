<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>ruby &#8211; Manton Reece</title>
	<atom:link href="http://www.manton.org/tag/ruby/feed" rel="self" type="application/rss+xml" />
	<link>http://www.manton.org</link>
	<description></description>
	<lastBuildDate>Tue, 13 Dec 2016 22:36:17 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Core Intuition 234 and Vapor</title>
		<link>http://www.manton.org/2016/05/core-intuition-234-and-vapor.html</link>
		<pubDate>Fri, 27 May 2016 20:34:57 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Podcasts]]></category>
		<category><![CDATA[coreint]]></category>
		<category><![CDATA[dynamic]]></category>
		<category><![CDATA[ruby]]></category>
		<category><![CDATA[swift]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=3949</guid>
		<description><![CDATA[We published Core Intuition 234 today, with a follow-up discussion on Swift, working toward software releases, and more. From the show notes: Daniel and Manton talk about the question of Swift’s dependence on Objective-C’s dynamism, how it should or will evolve, and their differences in philosophy about Swift and Objective-C. They also take stock of [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>We published <a href="http://www.coreint.org/2016/05/episode-234-make-swift-great-again/">Core Intuition 234</a> today, with a follow-up discussion on Swift, working toward software releases, and more. From the show notes:</p>
<blockquote><p>
  Daniel and Manton talk about the question of Swift’s dependence on Objective-C’s dynamism, how it should or will evolve, and their differences in philosophy about Swift and Objective-C. They also take stock of release discipline and managing customer disappointment with an app’s progress. Finally, they talk about the importance and difficulty of winding down old products.
</p></blockquote>
<p>One of the points I brought up on the show — and which I&#8217;ve hinted at <a href="http://www.manton.org/2016/05/apples-mindset-on-swift-dynamic-features.html">here on the blog before</a> — is that web developers will push Swift to become more dynamic. There&#8217;s a long history of building web server frameworks like Ruby on Rails that depend on dynamically routing requests to controllers and views, and flexible models that automatically adapt from your database schema. These features tend to get messy when faced with a more static, strongly-typed language.</p>
<p>There is good work being done in the Swift web community already, though. Today I spent some time building a sample app with <a href="http://qutheory.io/">Vapor</a>, which is probably the closest I&#8217;ve seen someone get to the usability of existing web frameworks. I&#8217;m a little more optimistic now that we might eventually have a single language for server code and native apps.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Swift and sharp knives</title>
		<link>http://www.manton.org/2016/05/swift-and-sharp-knives.html</link>
		<pubDate>Mon, 23 May 2016 15:36:35 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[dhh]]></category>
		<category><![CDATA[dynamic]]></category>
		<category><![CDATA[ruby]]></category>
		<category><![CDATA[swift]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=3936</guid>
		<description><![CDATA[David Heinemeier Hansson has a great post today about Ruby’s advanced dynamic features. Some people would criticize Ruby (and Rails) for including “sharp knives in its drawer of features”, but David argues that it’s a worthwhile tradeoff to give developers such power and flexibility: There’s nothing programmatically in Ruby to stop you using its sharp [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><a href="https://m.signalvnoise.com/provide-sharp-knives-cc0a22bf7934">David Heinemeier Hansson has a great post today</a> about Ruby’s advanced dynamic features. Some people would criticize Ruby (and Rails) for including “sharp knives in its drawer of features”, but David argues that it’s a worthwhile tradeoff to give developers such power and flexibility:</p>
<blockquote><p>
  There’s nothing programmatically in Ruby to stop you using its sharp knives to cut ties with reason. We enforce such good senses by convention, by nudges, and through education. Not by banning sharp knives from the kitchen and insisting everyone use spoons to slice tomatoes.
</p></blockquote>
<p>Given the <a href="http://mjtsai.com/blog/2016/05/21/dynamic-swift-2/">recent discussions</a> from the Apple community, I couldn’t stop thinking of Swift as I read David’s post. I wouldn’t go as far as saying that Swift is a dull knife; there is a lot to like about the language, and I feel reasonably productive in it now. But David’s “paternalism” line nevertheless rings true to me, that the Swift compiler is trying to protect us from ourselves.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Rails 4 years later</title>
		<link>http://www.manton.org/2009/01/rails_4_years.html</link>
		<pubDate>Fri, 02 Jan 2009 23:45:00 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[hansson]]></category>
		<category><![CDATA[php]]></category>
		<category><![CDATA[rails]]></category>
		<category><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://www.manton.org/2009/01/rails_4_years.html</guid>
		<description><![CDATA[Blog archives don&#8217;t lie. It&#8217;s been nearly 4 years since I first &#8220;blogged about Ruby on Rails&#8221;:http://manton.org/2005/02/the_ruby.html. (Three years and 10 months, but I&#8217;m not patient enough to wait until February to post this.) Here&#8217;s a portion of what I said back then: &#8220;But the PHP people will switch, easily, and with the apparent momentum [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Blog archives don&#8217;t lie. It&#8217;s been nearly 4 years since I first &#8220;blogged about Ruby on Rails&#8221;:http://manton.org/2005/02/the_ruby.html. (Three years and 10 months, but I&#8217;m not patient enough to wait until February to post this.) Here&#8217;s a portion of what I said back then:</p>
<blockquote><p>&#8220;But the PHP people will switch, easily, and with the apparent momentum of Ruby right now, maybe it&#8217;s already happening. Forget the enterprise for now. Rails is a perfect fit for anyone who develops for the web on its own terms, and the people behind apps like Basecamp, 43things, and the upcoming Odeo match that profile.&#8221;</p></blockquote>
<p>In that time I&#8217;ve increase my use of Rails. At &#8220;VitalSource&#8221;:http://www.vitalsource.com/ we have a bunch of Xserves running Rails applications. Mac developers have embraced Rails in the form of &#8220;PotionStore&#8221;:http://www.potionfactory.com/potionstore. Cheap shared hosts have been replaced with virtual servers, &#8220;many&#8221;:http://www.railsmachine.com/ with an emphasis on Rails hosting.</p>
<p>The community is huge now. What&#8217;s not to like?</p>
<p>Plenty! Here are my top gripes about Ruby on Rails.</p>
<p><em>Deployment</em>. Ask anyone &mdash; even its biggest fans &mdash; and they will complain about deploying Rails applications. This stems from two points: the overhead to initializing a Rails application, meaning multiple instances have to be fired up and ready, unlike PHP which can process a script at a moment&#8217;s notice; and the path of ever-changing deployment strategies littered with the corpses of FCGI, Mongrel, Passenger, Thin, and more.</p>
<p><em>Upgrades</em>. Rails matured quickly and is constantly improving. That&#8217;s great for features, great for best practices, and great for a clean API. The downside is that methods and entire chunks of the framework are deprecated <em>and removed</em> every major release. Forget about backwards compatibility. If you aren&#8217;t reading the blogs and keeping up with the latest changes, you&#8217;ll pay a price when it comes time to upgrade your application.</p>
<p><em>Attitude</em>. David Heinemeier Hansson and the Rails core team have been outspoken in their lack of concern for end users. It&#8217;s because Rails is not actually a product. It was released and is open source to benefit the community and to grow the framework, but average developers should have no misconception that anyone with Git commit access is looking out for their application. I have great respect for Hansson, as well as the other high-profile developers of Rails, but it helps set expectations to underscore that Rails is not a supported product.</p>
<p><em>Java</em>. Developers new to Rails generally come from the two other most popular web development languages: PHP and Java. Many leaders in the community come from that latter group, some of whom I count among my friends. Chad Fowler, in his &#8220;interview with Pragmatic&#8221;:http://www.pragprog.com/podcasts/show/19, spoke to the baggage that developers bring to a new platform. I think some of this baggage from a more &#8220;serious&#8221; architecture is leading to new complex abstractions, such as Capistrano. Whether fair or not, I also largely blame the Java developers for using tabs-as-spaces, which is evil. ;-)</p>
<p><em>Extensibility</em>. The Rails team wisely made a conscious effort to limit the number of features in the core of Rails, instead preferring new optional features to be implemented as gems or plug-ins. The problem is that there are limited hooks to extend the framework. Ruby is great at dynamically extending classes that weren&#8217;t designed with extensibility in mind, but there is no gaurantee that one plug-in&#8217;s monkey-patch will continue to work in future versions. Ironically, &#8220;merging Merb&#8221;:http://weblog.rubyonrails.org/2008/12/23/merb-gets-merged-into-rails-3 into Rails 3 will bring better supported APIs for plug-in authors while no doubt breaking a bunch of old stuff.</p>
<p><em>Speed</em>. I put this one last because I don&#8217;t actually think it&#8217;s as big of a show-stopper as many people think. Still, it&#8217;s true that Ruby is one of the slowest languages out there, falling behind Python, Perl, PHP, Java, and enormously behind compiled languages. ActiveRecord is great, but it also makes developers lazy and requires tweaking the defaults to achieve the same performance as hand-rolled SQL. Projects like &#8220;Rails Metal&#8221;:http://weblog.rubyonrails.org/2008/12/20/performance-of-rails-metal look very cool, though, so that&#8217;s a good sign for the platform.</p>
<p>Even with all these critiques, there is something special about Rails and I will continue to use it for many applications. But at the same time, any shame I used to have at using PHP is gone. <em>If I need to do something simple, I will use a simple solution.</em> As a sort of backlash against my frustrations with Rails, I built everything that powers Riverfold (order processing, admin interfaces, the &#8220;Wii Codes application&#8221;:http://wiitransfer.com/codes/ and Twitter services) off of PHP.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Rails on shared hosts</title>
		<link>http://www.manton.org/2008/01/rails_on_shared.html</link>
		<pubDate>Thu, 10 Jan 2008 14:52:11 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[dhh]]></category>
		<category><![CDATA[dreamhost]]></category>
		<category><![CDATA[potionstore]]></category>
		<category><![CDATA[rails]]></category>
		<category><![CDATA[riverfold]]></category>
		<category><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://www.manton.org/2008/01/rails_on_shared.html</guid>
		<description><![CDATA[&#8220;David Heinemeier Hansson writes in detail&#8221;:http://www.loudthinking.com/posts/21-the-deal-with-shared-hosts on the problems with Rails in shared hosts: &#8220;Most Rails contributors are not big users of shared hosting and they tend to work on problems or enhancements that&#8217;ll benefit their own usage of the framework. You don&#8217;t have to have a degree in formal logic to deduce that work [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>&#8220;David Heinemeier Hansson writes in detail&#8221;:http://www.loudthinking.com/posts/21-the-deal-with-shared-hosts on the problems with Rails in shared hosts:</p>
<blockquote><p>&#8220;Most Rails contributors are not big users of shared hosting and they tend to work on problems or enhancements that&#8217;ll benefit their own usage of the framework. You don&#8217;t have to have a degree in formal logic to deduce that work to improve life on shared hosting is not exactly a top priority for these people, myself included.&#8221;</p></blockquote>
<p>Although I&#8217;ve been building Rails apps for a couple years, and will continue to do so, I made the choice with &#8220;Riverfold&#8221;:http://www.riverfold.com/ to go PHP-only so that I could deploy on inexpensive shared hosts and easily move my sites. Fact is, you need to dedicate a significant portion of your time to being a system administrator if you run a Rails site.</p>
<p>I find the general &#8220;we don&#8217;t owe you anything&#8221; attitude in the Rails community off-putting. What it means is quite simple: Rails is not a product, despite what it might look like when you &#8220;visit the web site&#8221;:http://www.rubyonrails.com/. This is fine and consistent with the opinionated nature of Rails (which from a design perspective is what makes Rails excellent), but it also means that features like backwards compatibility are not just ignored but actively discouraged. The message this sends is that the core team values their own personal productivity over the productivity of the general Rails userbase.</p>
<p>Also, make no mistake, the performance questions surrounding Rails are directly related to the web shared host issue. Rails can&#8217;t be hosted in the same way that PHP is hosted because it takes so long for a Rails application to be initialized, requiring dedicated long-running app instances and an ever-changing array of &#8220;best practice&#8221; solutions starting with mod_ruby to FCGI to Mongrel to &#8220;Thin&#8221;:http://code.macournoyer.com/thin/.</p>
<p>My friends and &#8220;co-workers&#8221;:http://www.vitalsource.com/ are no doubt sick of me bashing Rails (see &#8220;this post on the priorities of the community&#8221;:http://www.manton.org/2007/09/rails_and_mac_dev.html), but I still admire Rails and do want to see these problems solved. I would love to use &#8220;PotionStore&#8221;:http://www.potionfactory.com/potionstore to power the Riverfold site, or to base my registration database and sales tracking in Rails.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Rails and Mac dev communities</title>
		<link>http://www.manton.org/2007/09/rails_and_mac.html</link>
		<pubDate>Mon, 17 Sep 2007 18:11:11 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[c4]]></category>
		<category><![CDATA[delicious]]></category>
		<category><![CDATA[mac]]></category>
		<category><![CDATA[rails]]></category>
		<category><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://www.manton.org/2007/09/rails_and_mac.html</guid>
		<description><![CDATA[&#8220;Damon Clinkscales has a write-up&#8221;:http://damonclinkscales.com/past/lone-star-charity-workshop-wrap-up/ of the Charity Workshop that took place before the Lone Star Ruby Conference in Austin a couple weekends ago. I skipped the conference and attended these tutorials instead, enjoying some great talks by Marcel Molina, Bruce Williams, and 6 other speakers all packed into 4 hours. I definitely picked up [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>&#8220;Damon Clinkscales has a write-up&#8221;:http://damonclinkscales.com/past/lone-star-charity-workshop-wrap-up/ of the Charity Workshop that took place before the Lone Star Ruby Conference in Austin a couple weekends ago. I skipped the conference and attended these tutorials instead, enjoying some great talks by Marcel Molina, Bruce Williams, and 6 other speakers all packed into 4 hours. I definitely picked up a few good tips on Ruby blocks and ActiveRecord, but I was not-so-secretly relieved that I didn&#8217;t attend the full conference.</p>
<p>&#8220;Since brunch on Sunday&#8221;:http://www.flickr.com/photos/digitalnomad/1352583178/ after the conference, where I got to hear another wrap-up from co-workers, I&#8217;ve been thinking about why. Why did I sell my RailsConf ticket and book a flight to Chicago for C4 instead? Why skip a cheap Ruby conference practically in my own backyard? Why have I whittled my Ruby-themed blog subscriptions down to just a few from dozens?</p>
<p>Now I know: it&#8217;s about the difference in the communities. The Mac developer community is all about building  unique apps, crafting an excellent user experience, and the &#8220;indie culture&#8221;:http://www.al3x.net/2007/08/c41-friday.html of building something small and useful. The Rails community by contrast seems focused on how few lines of code a controller method is. I&#8217;m lucky to work with people who care about that stuff, because it often does yield better applications, but I just don&#8217;t wake up in the morning excited about rewriting code, so why would I leave my family for a few days to hear someone talk about it?</p>
<p>There are many kinds of programmers. People who have hacked their whole life, dropping out of school to sell software; traditional developers with a CS degree and big company background; and even fine arts majors who fell into programming by accident as a way to build web sites. Based on that background, or what direction their passion takes them, I believe there is a balance between joy for the <em>act of writing code</em> vs. the pride in <em>seeing the final product</em>, and each programmer leans to one way or the other.</p>
<p>For Rails developers, at least many of the leaders in the industry who came from or were inspired by the extreme programming methodology and test-driven development, it&#8217;s the former: the art is found in the lines of code &#8212; how efficient can the logic be, how DRY, how RESTful.</p>
<p>For Mac developers, not just the &#8220;Delicious Generation&#8221;:http://www.rogueamoeba.com/utm/posts/Article/DeliciousGeneration-2006-11-06-10-00 but old school Mac developers as well, it&#8217;s the latter: the art is how the final product looks and behaves &#8212; being inspired to build something simply because you used another application that was great.</p>
<p>Cutting it this way allows me to see two things very clearly that were confusing before. It puts specifics to why I&#8217;ve drifted further away from the Rails cutting edge, and it explains why I get so annoyed with some of the newer crop of Mac developers who proclaim &#8220;bindings&#8221;:http://cocoadevcentral.com/articles/000080.php and garbage collection as beautiful gifts for programmer productivity even though they have no added value for the user experience.</p>
<p>Rails is a great framework, and I will continue to enjoy switching gears to write web apps in between my Mac projects. But I&#8217;m not going to tune back into that community until there is an equal focus on the bigger picture as it impacts the user (more scaling, more UI best practices), or whatever the next big thing to hit web apps ends up being.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Ta-da List export to TaskPaper</title>
		<link>http://www.manton.org/2007/08/tada_list_export.html</link>
		<pubDate>Sat, 04 Aug 2007 06:38:51 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[export]]></category>
		<category><![CDATA[ruby]]></category>
		<category><![CDATA[tadalist]]></category>
		<category><![CDATA[taskpaper]]></category>

		<guid isPermaLink="false">http://www.manton.org/2007/08/tada_list_export.html</guid>
		<description><![CDATA[I&#8217;ve been using &#8220;Ta-da List&#8221;:http://www.tadalist.com/ for the last couple of years for all my to-do lists. I have about 100 lists and love the speed of adding new items and some of the subtle smarts it applies to sorting recent lists and cleaning up completed ones. But I&#8217;ve been on the lookout for a desktop [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I&#8217;ve been using &#8220;Ta-da List&#8221;:http://www.tadalist.com/ for the last couple of years for all my to-do lists. I have about 100 lists and love the speed of adding new items and some of the subtle smarts it applies to sorting recent lists and cleaning up completed ones.</p>
<p>But I&#8217;ve been on the lookout for a desktop app. OmniOutliner has become a bit bloated and all the Getting Things Done apps seem so structured. Along comes &#8220;TaskPaper&#8221;:http://hogbaysoftware.com/projects/taskpaper today and there&#8217;s a lot to like. The plain text file format is refreshing and nicely open.</p>
<p>I wrote a Ruby script to export all my lists from Ta-da into TaskPaper so that I can give it a proper workout. It makes a new document (with a single project) for each list it finds. Make sure to install &#8220;Hpricot&#8221;:http://code.whytheluckystiff.net/hpricot/ first &#8212; there&#8217;s no official Ta-da List API so we need to parse HTML a little.</p>
<p>Download: &#8220;tadalist_taskpaper.rb&#8221;:http://www.manton.org/software/scripts/tadalist_taskpaper.rb</p>
<p>Instructions:</p>
<ul>
<li>Open the file in your favorite text editor and change TADALIST_HOST to whatever your account is.</p>
</li>
<li>
<p>Make sure Safari is running and you have logged into Ta-da. The script reads the cookie value from Safari&#8217;s Cookies.plist so that it doesn&#8217;t need to simulate a real sign-in.</p>
</li>
<li>
<p>Run from the command line. It will create the new files in the current directory.</p>
</li>
<li>
<p>You will see short status messages for what it is doing. It&#8217;s broken if there are any Ruby exceptions.</p>
</li>
</ul>
<p>Enjoy!</p>
]]></content:encoded>
			</item>
		<item>
		<title>RubyCocoa</title>
		<link>http://www.manton.org/2006/07/rubycocoa.html</link>
		<pubDate>Mon, 17 Jul 2006 03:08:55 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[cocoa]]></category>
		<category><![CDATA[frameworks]]></category>
		<category><![CDATA[mac]]></category>
		<category><![CDATA[objective-c]]></category>
		<category><![CDATA[ruby]]></category>

		<guid isPermaLink="false">http://www.manton.org/2006/07/rubycocoa.html</guid>
		<description><![CDATA[I write Mac software, but over the last year I&#8217;ve increasingly been building Ruby on Rails web apps as well. Today I finally took a look at &#8220;RubyCocoa&#8221;:http://www.rubycocoa.com/. I wanted to whip up a quick Cocoa app that would involve some text parsing, and a dynamic scripting language like Ruby is a much better fit [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I write Mac software, but over the last year I&#8217;ve increasingly been building Ruby on Rails web apps as well. Today I finally took a look at &#8220;RubyCocoa&#8221;:http://www.rubycocoa.com/. I wanted to whip up a quick Cocoa app that would involve some text parsing, and a dynamic scripting language like Ruby is a much better fit for text processing than C, C++, or Objective-C.</p>
<p>It turns out RubyCocoa works amazingly well. I have only scratched the surface with a small test app, but I was blown away by its ease-of-use, Xcode integration, example projects, and apparent maturity. You have full access to AppKit from Ruby-based controllers and views, and a single NIB file can even reference both Objective-C and Ruby classes. Fantastic stuff.</p>
<p>I don&#8217;t know if it&#8217;s ready for commercial software use yet. For distribution, I tested including the RubyCocoa.framework inside the application package and the app launches and runs correctly on a system without the full RubyCocoa install. There may be issues with requiring a recent version of Ruby, but otherwise it&#8217;s a fully native app.</p>
<p>My only disappointment was in the Objective-C calling conventions. There are two versions to choose from: a style using underscores to separate named values, and a slightly easier Ruby syntax using symbols and extra parameters. Here they are:</p>
<p><em>Objective-C:</em></p>
<p><code>[my_window setFrame:r display:YES animate:YES]</code></p>
<p><em>Ruby Underscores:</em></p>
<p><code>my_window.setFrame_display_animate(r, true, true)</code></p>
<p><em>Ruby Symbols:</em></p>
<p><code>my_window.setFrame(r, :display, true, :animate, true)</code></p>
<p>In my opinion, a better approach would be to take advantage of Ruby&#8217;s trick of allowing the last parameter to be a hash supplied without the curly braces. This feels more readable to me and more closely matches the Objective-C equivalent.</p>
<p><em>Better:</em></p>
<p><code>my_window.setFrame(r, :display => true, :animate => true)</code></p>
<p>In any case, that&#8217;s a minor complaint and doesn&#8217;t take much away from the beauty of writing native Mac apps in Ruby.</p>
]]></content:encoded>
			</item>
	</channel>
</rss>

<!-- Dynamic page generated in 0.300 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2016-12-13 17:03:35 -->
