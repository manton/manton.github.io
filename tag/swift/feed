<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>swift &#8211; Manton Reece</title>
	<atom:link href="http://www.manton.org/tag/swift/feed" rel="self" type="application/rss+xml" />
	<link>http://www.manton.org</link>
	<description></description>
	<lastBuildDate>Tue, 13 Dec 2016 22:36:17 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Core Int 242, Swift, and verified Twitter</title>
		<link>http://www.manton.org/2016/07/core-int-242-swift-and-verified-twitter.html</link>
		<pubDate>Thu, 21 Jul 2016 19:28:54 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Podcasts]]></category>
		<category><![CDATA[coreint]]></category>
		<category><![CDATA[objc]]></category>
		<category><![CDATA[swift]]></category>
		<category><![CDATA[twitter]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=4141</guid>
		<description><![CDATA[From the show notes for today&#8217;s episode: Manton reacts to negatively to the Swift 3 decision to disallows subclassing by default, while Daniel tries to see the bright side. The two discuss Twitter’s new invitation to apply for @verified status, and Daniel’s attempt to do so. And they quickly touch base on the upcoming Apple-sponsored [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>From the show notes for <a href="http://coreint.org/242">today&#8217;s episode</a>:</p>
<blockquote><p>
  Manton reacts to negatively to the Swift 3 decision to disallows subclassing by default, while Daniel tries to see the bright side. The two discuss Twitter’s new invitation to apply for @verified status, and Daniel’s attempt to do so. And they quickly touch base on the upcoming Apple-sponsored reality show, “Planet of the Apps.”
</p></blockquote>
<p>Believe it or not, I was kind of holding back a little in my Swift ranting. But it was the most critical I&#8217;ve been on the show. And it&#8217;s totally okay for you to disagree! Maybe even <em>good for the platform</em> if you do.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Swift server benchmarks</title>
		<link>http://www.manton.org/2016/06/swift-server-benchmarks.html</link>
		<pubDate>Fri, 03 Jun 2016 12:37:21 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[servers]]></category>
		<category><![CDATA[swift]]></category>
		<category><![CDATA[vapor]]></category>
		<category><![CDATA[webapps]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=3959</guid>
		<description><![CDATA[Interesting Swift web server article comparing Vapor, which I tested last week, to other web server frameworks: This first post will cover input, i.e. request data. Fetching input from a request, ensuring it is the correct type, and most importantly, not crashing. These are common tasks that most web developers deal with daily. All of [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><a href="https://medium.com/@qutheory/server-side-swift-vs-the-other-guys-1-input-ec48d7be37b7#.5mou8yl1a">Interesting Swift web server article</a> comparing Vapor, which <a href="http://www.manton.org/2016/05/core-intuition-234-and-vapor.html">I tested last week</a>, to other web server frameworks:</p>
<blockquote><p>
  This first post will cover input, i.e. request data. Fetching input from a request, ensuring it is the correct type, and most importantly, not crashing. These are common tasks that most web developers deal with daily. All of the frameworks have their own unique way of doing these tasks–Let’s see how they contrast.
</p></blockquote>
<p>There is some further discussion from fans of other languages in the comments. Overall I think the article was fair. I’m not sure about the focus on “crashing”, though. This seems like a carryover from pro-Swift arguments on the desktop or mobile, and it has less relevance on the web.</p>
<p>For some web apps, it might be fine to throw an exception on bad input data, since it’s caught automatically and returned as a 500 error. I wouldn’t call that a crash anymore than I would call it a crash for a Mac app to present a generic error dialog on unexpected errors.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Core Intuition 234 and Vapor</title>
		<link>http://www.manton.org/2016/05/core-intuition-234-and-vapor.html</link>
		<pubDate>Fri, 27 May 2016 20:34:57 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Podcasts]]></category>
		<category><![CDATA[coreint]]></category>
		<category><![CDATA[dynamic]]></category>
		<category><![CDATA[ruby]]></category>
		<category><![CDATA[swift]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=3949</guid>
		<description><![CDATA[We published Core Intuition 234 today, with a follow-up discussion on Swift, working toward software releases, and more. From the show notes: Daniel and Manton talk about the question of Swift’s dependence on Objective-C’s dynamism, how it should or will evolve, and their differences in philosophy about Swift and Objective-C. They also take stock of [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>We published <a href="http://www.coreint.org/2016/05/episode-234-make-swift-great-again/">Core Intuition 234</a> today, with a follow-up discussion on Swift, working toward software releases, and more. From the show notes:</p>
<blockquote><p>
  Daniel and Manton talk about the question of Swift’s dependence on Objective-C’s dynamism, how it should or will evolve, and their differences in philosophy about Swift and Objective-C. They also take stock of release discipline and managing customer disappointment with an app’s progress. Finally, they talk about the importance and difficulty of winding down old products.
</p></blockquote>
<p>One of the points I brought up on the show — and which I&#8217;ve hinted at <a href="http://www.manton.org/2016/05/apples-mindset-on-swift-dynamic-features.html">here on the blog before</a> — is that web developers will push Swift to become more dynamic. There&#8217;s a long history of building web server frameworks like Ruby on Rails that depend on dynamically routing requests to controllers and views, and flexible models that automatically adapt from your database schema. These features tend to get messy when faced with a more static, strongly-typed language.</p>
<p>There is good work being done in the Swift web community already, though. Today I spent some time building a sample app with <a href="http://qutheory.io/">Vapor</a>, which is probably the closest I&#8217;ve seen someone get to the usability of existing web frameworks. I&#8217;m a little more optimistic now that we might eventually have a single language for server code and native apps.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Swift and sharp knives</title>
		<link>http://www.manton.org/2016/05/swift-and-sharp-knives.html</link>
		<pubDate>Mon, 23 May 2016 15:36:35 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[dhh]]></category>
		<category><![CDATA[dynamic]]></category>
		<category><![CDATA[ruby]]></category>
		<category><![CDATA[swift]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=3936</guid>
		<description><![CDATA[David Heinemeier Hansson has a great post today about Ruby’s advanced dynamic features. Some people would criticize Ruby (and Rails) for including “sharp knives in its drawer of features”, but David argues that it’s a worthwhile tradeoff to give developers such power and flexibility: There’s nothing programmatically in Ruby to stop you using its sharp [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><a href="https://m.signalvnoise.com/provide-sharp-knives-cc0a22bf7934">David Heinemeier Hansson has a great post today</a> about Ruby’s advanced dynamic features. Some people would criticize Ruby (and Rails) for including “sharp knives in its drawer of features”, but David argues that it’s a worthwhile tradeoff to give developers such power and flexibility:</p>
<blockquote><p>
  There’s nothing programmatically in Ruby to stop you using its sharp knives to cut ties with reason. We enforce such good senses by convention, by nudges, and through education. Not by banning sharp knives from the kitchen and insisting everyone use spoons to slice tomatoes.
</p></blockquote>
<p>Given the <a href="http://mjtsai.com/blog/2016/05/21/dynamic-swift-2/">recent discussions</a> from the Apple community, I couldn’t stop thinking of Swift as I read David’s post. I wouldn’t go as far as saying that Swift is a dull knife; there is a lot to like about the language, and I feel reasonably productive in it now. But David’s “paternalism” line nevertheless rings true to me, that the Swift compiler is trying to protect us from ourselves.</p>
]]></content:encoded>
			</item>
		<item>
		<title>New Core Int, Technical Foul, and Timetable</title>
		<link>http://www.manton.org/2016/05/new-core-int-technical-foul-and-timetable.html</link>
		<pubDate>Sat, 21 May 2016 01:11:03 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Podcasts]]></category>
		<category><![CDATA[coreint]]></category>
		<category><![CDATA[google]]></category>
		<category><![CDATA[nba]]></category>
		<category><![CDATA[spurs]]></category>
		<category><![CDATA[swift]]></category>
		<category><![CDATA[technicalfoul]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=3934</guid>
		<description><![CDATA[I somehow recorded 4 podcast episodes this week. We just published episode 233 of Core Intuition, where Daniel Jalkut and I talk about the announcements from Google I/O and compare the latest Swift 3 news to our experience going through previous Apple transitions. From the show notes: &#8220;Manton and Daniel react to Google’s I/O keynote, [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I somehow recorded 4 podcast episodes this week. We just published <a href="http://www.coreint.org/2016/05/episode-233-actually-i-am-a-little-worried/">episode 233 of Core Intuition</a>, where Daniel Jalkut and I talk about the announcements from Google I/O and compare the latest Swift 3 news to our experience going through previous Apple transitions. From the show notes:</p>
<blockquote><p>
  &#8220;Manton and Daniel react to Google’s I/O keynote, and weigh the threat of Allo to iMessage. They celebrate Apple’s WWDC promotion of 3rd party events, and the increasing speed of App Store reviews. Finally, they reflect on the announced delay in Swift 3’s planned ABI stability, and Daniel’s sudden FUD about embracing Swift.&#8221;
</p></blockquote>
<p>It was a big week for the NBA, too, with the first couple games of the east and west conference finals. On <a href="http://technicalfoul.fm/episode-05-therapy-for-manton/">the latest Technical Foul</a>, Ben Thompson and I recap round 2, especially the Spurs loss in 6 games to the Thunder:</p>
<blockquote><p>
  Ben and Manton are back geeking out about the NBA. This week we talk Manton through the Spurs loss, discuss OKC versus the Warriors, and whether the Cavs are good enough.
</p></blockquote>
<p>And finally, I published 2 episodes of my microcast Timetable earlier in the week. <a href="http://timetable.manton.org/2016/05/episode-22-grumpy-about-everything/">Episode 22</a> was about dealing with recent stress — trying to see the bigger picture and focus on the good things. <a href="http://timetable.manton.org/2016/05/episode-23-when-a-product-is-over/">Episode 23</a> was about how to tell when it&#8217;s time to move on from a failed product.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Apple&#8217;s mindset on Swift dynamic features</title>
		<link>http://www.manton.org/2016/05/apples-mindset-on-swift-dynamic-features.html</link>
		<pubDate>Sun, 15 May 2016 16:50:08 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[dynamic]]></category>
		<category><![CDATA[macworld]]></category>
		<category><![CDATA[nextstep]]></category>
		<category><![CDATA[objc]]></category>
		<category><![CDATA[swift]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=3927</guid>
		<description><![CDATA[I let myself go off into a bit of a Swift rant on the latest Core Intuition. I’ve been doing a lot of Swift development recently. The more I use it, the more conflicted I am. I really love some parts of the language, but it’s not what I would have asked for as a [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I let myself go off into a bit of a Swift rant on <a href="http://coreint.org/232">the latest Core Intuition</a>. I’ve been doing a lot of Swift development recently. The more I use it, the more conflicted I am. I really love some parts of the language, but it’s not what I would have asked for as a successor to Objective-C 2.0.</p>
<p>Remember when Steve Jobs came back to Apple and compared NeXTSTEP to constructing a building by starting out on the 20th floor, with so much of the foundation and common patterns already taken care of for you? Cocoa allowed apps to be built significantly faster than before. Steve said <a href="https://www.youtube.com/watch?v=4QrX047-v-s">at Macworld Expo in 1997</a> that the goal was to &#8220;eliminate 80% of the code that every developer has to write for their app.&#8221;</p>
<p>Swift is not like that. Swift’s priorities are correctness and stability. These have more indirect benefits to developer productivity than we saw going from Carbon to Cocoa.</p>
<p>When <a href="https://marco.org/2016/04/21/brent-performance">Marco Arment wrote about Swift</a> last month, he mentioned wanting a language designed for high-level apps:</p>
<blockquote><p>
  Objective-C wasn’t much better for this, but I think we could’ve done better than Swift if the most important goal in Swift was maximizing real-world developer productivity when writing modern Mac and iOS apps. Swift does a little of that, but gives up a lot to also serve lower-level, more clever, language-geekier goals.
</p></blockquote>
<p>This weekend, <a href="http://inessential.com/2016/05/14/the_tension_of_swift">Brent Simmons has a new post</a> about the loss of dynamic features in “pure” Swift:</p>
<blockquote><p>
  What makes me nervous is Swift’s emphasis on type safety and on compile-time resolution. As long as we also have what we need from Objective-C, then that’s fine — then we still get xibs and storyboards, the Responder Chain, and so on.
</p></blockquote>
<p>I hope Brent’s right that this will be a core part of Swift 4. Leaning on the Objective-C runtime feels like a temporary solution because it only exists on the Mac and iOS. Great web frameworks like Ruby on Rails, for example, can’t be built without relying on a more dynamic language. (And to me a great promise for Swift is being able to use it everywhere.)</p>
<p><a href="http://indiestack.com/2016/05/brents-swift-tension/">Daniel Jalkut followed up</a> with a more optimistic post. He thinks Apple is on top of this, even as he acknowledges the clash between existing frameworks and the new language:</p>
<blockquote><p>
  Some major design priorities of the Swift language, namely type safety and compile time dependency binding, are at odds with the design priorities of 20 years of evolution in Apple’s frameworks. How and if that disparity will be reckoned by Apple remains to be seen.
</p></blockquote>
<p>I think it’s telling that the “dynamic” keyword isn’t even mentioned in the main language guide. Anything related to Objective-C is off in a <a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html#//apple_ref/doc/uid/TP40014216-CH4-ID35">separate set of documentation</a>, which includes discouraging statements such as “Requiring dynamic dispatch is rarely necessary” and “use of the performSelector APIs is discouraged”. For Swift to thrive in the future, as a great language for newcomers and long-time Mac developers, Apple will have to compromise on that mindset.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Core Intuition 225</title>
		<link>http://www.manton.org/2016/03/core-intuition-225.html</link>
		<pubDate>Thu, 24 Mar 2016 21:44:00 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Podcasts]]></category>
		<category><![CDATA[coreint]]></category>
		<category><![CDATA[iphone5se]]></category>
		<category><![CDATA[podcast]]></category>
		<category><![CDATA[swift]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=3774</guid>
		<description><![CDATA[Episode 225 of Core Intuition is out now. We talk about the new iPhone and iPad news from Monday’s Apple event, plus Swift. From the show notes: Manton orders his dream phone, the iPhone SE. Daniel reflects on the growing allure of Swift, and the two discuss the risks of either adopting new technologies too [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><a href="http://www.coreint.org/2016/03/episode-225-keep-your-eyes-open/">Episode 225 of Core Intuition</a> is out now. We talk about the new iPhone and iPad news from Monday’s Apple event, plus Swift. From the show notes:</p>
<blockquote><p>
  Manton orders his dream phone, the iPhone SE. Daniel reflects on the growing allure of Swift, and the two discuss the risks of either adopting new technologies too soon, or holding on to the past for too long.
</p></blockquote>
<p>Also there&#8217;s this line from Daniel in the podcast that I like:</p>
<blockquote><p>
  We have to be tuned into the future <em>and</em> tuned into the past to really do great work.
</p></blockquote>
<p>We pull in some history from Daniel&#8217;s time at Apple, and from our experience building Mac apps in the 1990s and early 2000s, and how it relates to the current Swift transition. Hope you enjoy it.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Tim Cook, Swift, and the return of blogs</title>
		<link>http://www.manton.org/2016/01/tim-cook-swift-and-the-return-of-blogs.html</link>
		<pubDate>Tue, 26 Jan 2016 15:17:26 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Weblogs]]></category>
		<category><![CDATA[blogging]]></category>
		<category><![CDATA[swift]]></category>
		<category><![CDATA[timcook]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=3439</guid>
		<description><![CDATA[Rob Rhyne wrote an essay last week that caught my attention, on Tim Cook and the incredible pace of new major OS versions at Apple: “Still think Apple isn’t innovating enough under Tim Cook? Don’t let an app developer hear that talk—they want a vacation, and the end of 2015 showed no signs of relief.” [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><a href="http://rd2.io/2016/01/tim-cooks-apple/">Rob Rhyne wrote an essay last week</a> that caught my attention, on Tim Cook and the incredible pace of new major OS versions at Apple:</p>
<blockquote><p>
  “Still think Apple isn’t innovating enough under Tim Cook? Don’t let an app developer hear that talk—they want a vacation, and the end of 2015 showed no signs of relief.”
</p></blockquote>
<p>But I found it significant for another reason too: Rob hadn’t blogged on that site in over 2 years. He picked it up as if no time had been lost, hitting the ground running with a great post.</p>
<p>He’s not the only one starting to blog more. Matt Gallagher just <a href="http://cocoawithlove.com/blog/2016/01/25/a-new-era-for-cocoa-with-love.html">rebooted Cocoa with Love</a> after 4 years since his last post. Swift was a good excuse to resume writing, but he had wanted to continue the site anyway.</p>
<p>Most of my favorite blogs have new posts every day, or at least once a week. New posts bring more links and traffic, giving the blog life and momentum.</p>
<p>There’s no single correct way to blog, though. Blogs are forgiving. If you’ve neglected your blog for a while, you don’t owe anyone an apology. Just hit command-N in your favorite text editor and start writing.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Core Intuition 210</title>
		<link>http://www.manton.org/2015/12/core-intuition-210.html</link>
		<pubDate>Sat, 12 Dec 2015 21:32:56 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Podcasts]]></category>
		<category><![CDATA[coreint]]></category>
		<category><![CDATA[podcast]]></category>
		<category><![CDATA[swift]]></category>
		<category><![CDATA[wordpress]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=3253</guid>
		<description><![CDATA[On the latest Core Intuition, we talk about open source Swift, it&#8217;s potential for web server frameworks, and more about blogging tools. From the show notes: &#8220;Daniel and Manton react to Swift’s open-sourcing, and the extent to which it adds momentum to the language and increases its appeal. They also discuss the open-sourcing of Microsoft’s [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>On the <a href="http://www.coreint.org/2015/12/episode-210-they-pushed-it-to-github/">latest Core Intuition</a>, we talk about open source Swift, it&#8217;s potential for web server frameworks, and more about blogging tools. From the show notes:</p>
<blockquote><p>
  &#8220;Daniel and Manton react to Swift’s open-sourcing, and the extent to which it adds momentum to the language and increases its appeal. They also discuss the open-sourcing of Microsoft’s MarsEdit-esque blog editor, Windows Live Writer.&#8221;
</p></blockquote>
<p>There were also a few new jobs posted to <a href="http://jobs.coreint.org/">jobs.coreint.org</a> yesterday. Check them out if you&#8217;re considering a change for 2016, or just curious what is out there for Objective-C and Swift jobs.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Swift and Core Intuition 209</title>
		<link>http://www.manton.org/2015/12/swift-and-core-intuition-209.html</link>
		<pubDate>Thu, 03 Dec 2015 21:13:51 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[coreint]]></category>
		<category><![CDATA[opensource]]></category>
		<category><![CDATA[servers]]></category>
		<category><![CDATA[swift]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=3225</guid>
		<description><![CDATA[Like many developers, I&#8217;ve spent the morning looking over the Swift open source release. I continue to be intrigued and look forward to working Swift into more of my routine. On today&#8217;s Core Intuition, Daniel and I talked about Swift for about half of the 50-minute episode. We recorded the episode yesterday afternoon, before the [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Like many developers, I&#8217;ve spent the morning looking over the <a href="https://swift.org/">Swift open source release</a>. I continue to be intrigued and look forward to working Swift into more of my routine.</p>
<p>On <a href="http://www.coreint.org/2015/12/episode-209-we-need-a-grand-gesture/">today&#8217;s Core Intuition</a>, Daniel and I talked about Swift for about half of the 50-minute episode. We recorded the episode yesterday afternoon, before the open source announcement, so we&#8217;ll be following up next week on everything that has changed. I bet there will be some more progress in Swift web server frameworks by then, too.</p>
]]></content:encoded>
			</item>
	</channel>
</rss>

<!-- Dynamic page generated in 0.283 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2016-12-13 16:59:18 -->
