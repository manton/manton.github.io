<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>urls &#8211; Manton Reece</title>
	<atom:link href="http://www.manton.org/tag/urls/feed" rel="self" type="application/rss+xml" />
	<link>http://www.manton.org</link>
	<description></description>
	<lastBuildDate>Tue, 13 Dec 2016 22:36:17 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.6.1</generator>
	<item>
		<title>Fixing AMP</title>
		<link>http://www.manton.org/2016/11/fixing-amp.html</link>
		<pubDate>Mon, 21 Nov 2016 21:21:23 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Technology]]></category>
		<category><![CDATA[amp]]></category>
		<category><![CDATA[applenews]]></category>
		<category><![CDATA[google]]></category>
		<category><![CDATA[mobile]]></category>
		<category><![CDATA[urls]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=4480</guid>
		<description><![CDATA[When I first wrote about Accelerated Mobile Pages, there wasn&#8217;t a true implementation. Now we see how Google is rolling this out, and it has problems. John Gruber uses Ars Technica as an example: On desktop browsers, these URLs do get redirected to Ars’s website. But on mobile they don’t. Share from one mobile device [&#8230;]]]></description>
				<content:encoded><![CDATA[<p><a href="http://www.manton.org/2015/11/accelerated-mobile-pages-from-google.html">When I first wrote about Accelerated Mobile Pages</a>, there wasn&#8217;t a true implementation. Now we see how Google is rolling this out, and it has problems. <a href="https://daringfireball.net/linked/2016/10/21/google-amp">John Gruber</a> uses Ars Technica as an example:</p>
<blockquote><p>
  On desktop browsers, these URLs do get redirected to Ars’s website. But on mobile they don’t. Share from one mobile device to another and nobody ever leaves google.com. Why would any website turn their entire mobile audience — a majority share of their total audience, for many sites today — over to Google?
</p></blockquote>
<p>Maybe this is inherent in how AMP works, and we should have predicted it. If Google&#8217;s AMP implementation must run in browsers, will there always be a layer of JavaScript and custom URLs that hide the original web site?</p>
<p>I&#8217;d prefer if Google added AMP support directly to Chrome. While it would be a much more limited rollout, it would feel more natural, with fewer drawbacks for publishers.</p>
<p>Competing news platform Apple News isn&#8217;t problem-free either. The <code>apple.news://</code> shared links also add a redirect, with inconsistent behavior since not all platforms and countries even support Apple News. Apple News is an RSS reader that&#8217;s designed like a closed platform.</p>
<p>I want the web to be faster. Breaking links should not be part of the solution.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Microblog links</title>
		<link>http://www.manton.org/2014/09/microblog-links.html</link>
		<pubDate>Wed, 17 Sep 2014 17:19:25 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Weblogs]]></category>
		<category><![CDATA[links]]></category>
		<category><![CDATA[microblogs]]></category>
		<category><![CDATA[rss]]></category>
		<category><![CDATA[urls]]></category>

		<guid isPermaLink="false">http://www.manton.org/?p=2271.html</guid>
		<description><![CDATA[Brent Simmons points to my post on microblogs and asks: &#8220;Is the web we lost gone forever? Was it a brief golden age before the rise of Facebook and Twitter and The Algorithms of Engagement?&#8221; But he quickly follows with an alternate view: that it&#8217;s a blip and we&#8217;ll get back on track. And that&#8217;s [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Brent Simmons points to my post on microblogs <a href="http://inessential.com/2014/09/15/manton_on_microblogs">and asks</a>:</p>
<blockquote><p>
  &#8220;Is the web we lost gone forever? Was it a brief golden age before the rise of Facebook and Twitter and The Algorithms of Engagement?&#8221;
</p></blockquote>
<p>But he quickly follows with an alternate view: that it&#8217;s a blip and we&#8217;ll get back on track. And that&#8217;s what I believe.</p>
<p>Instead of accepting a common opinion that Twitter is slowly replacing RSS readers, we should flip that around. What kind of changes could be made to RSS readers to embrace microblogging and make Twitter itself less important? Because once we do that, we get back control of our own short-form content and at the same time encourage open tools that will survive independent of whatever happens with Twitter and Facebook in the future.</p>
<p>I received some other great feedback about defining what it means to be a microblog post. One question that I didn&#8217;t address is links. <a href="http://noahread.net/blog/microblog-links">Noah Read writes</a>:</p>
<blockquote><p>
  &#8220;It has consistently annoyed me that Twitter and App.net’s links count against my character count. It seems to run counter to what I love about microblogging, carefully chosen words communicating a succinct idea. I often have a pretty good tweet composed and then I paste in the link to a site or image and have to rework the whole thing.&#8221;
</p></blockquote>
<p><a href="http://david.ely.fm/post/97612487910/re-defining-a-microblog-post">And David Ely says</a> that a microblog post&#8230;</p>
<blockquote><p>
  &#8220;Contains a single thought, a link with short commentary, or a photo with a caption.&#8221;
</p></blockquote>
<p>Whereas a full blog post would often contain multiple links. Certainly a lot of what is posted to Twitter and Facebook is just a single link with short commentary.</p>
<p>I also noticed recently that Dave Winer&#8217;s <a href="http://radio3.io/">Radio3</a> includes links in the text when tweeting, but in the RSS feed the text and the link are split out. The URL goes in the RSS item&#8217;s link tag. While this is easy enough to support in tools, it&#8217;s surprising if you consider the link part of the content, not metadata. (I also expect inline HTML links to become even more common.)</p>
]]></content:encoded>
			</item>
		<item>
		<title>Tweet Library 2.5 and consolidation</title>
		<link>http://www.manton.org/2014/04/tweet_library_25.html</link>
		<pubDate>Wed, 23 Apr 2014 17:09:35 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[appstore]]></category>
		<category><![CDATA[tweetlibrary]]></category>
		<category><![CDATA[urls]]></category>
		<category><![CDATA[watermark]]></category>

		<guid isPermaLink="false">http://www.manton.org/2014/04/tweet_library_25.html</guid>
		<description><![CDATA[There&#8217;s a new update to Tweet Library out today. Major additions include CSV file export to Dropbox and new URL schemes for starting a search, export, or publish. The URL schemes look like this: twtlib://username/search?q=hello&#38;collection=Favorites twtlib://username/export?collection=Testing twtlib://username/publish?collection=Testing twtlib://username/storify?collection=Testing There are a few other important bug fixes too, especially to importing the Tweets.zip archive from Twitter. [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>There&#8217;s a new update to <a href="http://www.riverfold.com/software/tweetlibrary/">Tweet Library</a> out today. Major additions include CSV file export to Dropbox and new URL schemes for starting a search, export, or publish. The URL schemes look like this:</p>
<p>twtlib://username/search?q=hello&amp;collection=Favorites</p>
<p>twtlib://username/export?collection=Testing</p>
<p>twtlib://username/publish?collection=Testing</p>
<p>twtlib://username/storify?collection=Testing</p>
<p>There are a few other important bug fixes too, especially to importing the Tweets.zip archive from Twitter.</p>
<p>When I gave up on Twitter as a user, many people asked if I would abandon Tweet Library. I wasn&#8217;t sure at first, but the answer now is a clear &#8220;no&#8221;. In fact, since my last personal tweet in 2012, I&#8217;ve released new features and even redesigned the app for iOS 7.</p>
<p>But I do need to start consolidating my work on Tweet Library and <a href="http://watermark.io/">Watermark</a>, because the apps share so many concepts around archiving and search. To that end, this week I&#8217;m retiring tweetlibrary.com as a way to browse and publish collections. The site will now redirect to a special landing page on Watermark. Published collections from Tweet Library also go to a public page on Watermark.</p>
<p>It was a tough decision to change the tweetlibrary.com URLs, but maintaining separate web apps that are so similar made everything more complicated, holding back what I could build. Having a single web codebase (Watermark) will ultimately let me improve both Tweet Library and Watermark more quickly.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Launch Center Pro and Sunlit</title>
		<link>http://www.manton.org/2014/01/launch_center_pro.html</link>
		<pubDate>Thu, 30 Jan 2014 23:20:17 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[iphone]]></category>
		<category><![CDATA[launchcenterpro]]></category>
		<category><![CDATA[sunlit]]></category>
		<category><![CDATA[urls]]></category>

		<guid isPermaLink="false">http://www.manton.org/2014/01/launch_center_pro.html</guid>
		<description><![CDATA[I’ve long been a fan of Launch Center Pro, an iPhone app from my local Texas friends David Barnard and Justin Youens. It’s handy even for fairly simple tasks — firing off web searches or other shortcuts into apps — but it’s especially powerful when wiring up multiple apps together. For Sunlit it was nice [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>I’ve long been a fan of <a href="http://contrast.co/launch-center-pro/">Launch Center Pro</a>, an iPhone app from my local Texas friends David Barnard and Justin Youens. It’s handy even for fairly simple tasks — firing off web searches or other shortcuts into apps — but it’s especially powerful when wiring up multiple apps together. For Sunlit it was nice to provide some full actions that Launch Center Pro users could use to automate bringing content into Sunlit.</p>
<p>Jonathan has <a href="http://jonathanhays.me/2014/01/28/the-schemes-of-sunlit/">the full rundown on the URL schemes</a> that Sunlit supports and why we think they’re important. You can also use the Action Composer inside Launch Center Pro to access these actions without having to type them in.</p>
<p>And just today, <a href="http://www.macstories.net/reviews/launch-center-pro-for-ipad-review/">Launch Center Pro for iPad shipped</a>. Check it out and explore <a href="http://actions.contrast.co">some of the many apps</a> like <a href="http://sunlit.io/">Sunlit</a> that are supported.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Ugly reminders</title>
		<link>http://www.manton.org/2009/02/ugly_reminders.html</link>
		<pubDate>Fri, 27 Feb 2009 16:02:25 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Personal]]></category>
		<category><![CDATA[reminders]]></category>
		<category><![CDATA[riverfold]]></category>
		<category><![CDATA[ugly]]></category>
		<category><![CDATA[urls]]></category>

		<guid isPermaLink="false">http://www.manton.org/2009/02/ugly_reminders.html</guid>
		<description><![CDATA[In my &#8220;last post about family pricing&#8221;:http://www.manton.org/2008/10/family_packs.html, I mentioned that I modified my PayPal scripts for backend order processing to support family packs, but I left out that the whole system is a hack. A hack that processes a nice chunk of money, but a hack nonetheless. Hard-coded PayPal buttons and coupons, PHP that would [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>In my &#8220;last post about family pricing&#8221;:http://www.manton.org/2008/10/family_packs.html, I mentioned that I modified my PayPal scripts for backend order processing to support family packs, but I left out that the whole system is a hack. A hack that processes a nice chunk of money, but a hack nonetheless. Hard-coded PayPal buttons and coupons, PHP that would make even newbie web developers cringe, too few lines of code to really be taken seriously.</p>
<p>I refactored it a few months ago, but kept some ugliness in there to remind myself that I should move to a &#8220;mature store solution&#8221;:http://www.potionfactory.com/potionstore. Sometimes we build systems that are flawed from the start, and it&#8217;s wasted effort to invest time into something that will be replaced. Instead, let the thing stand out like a sore thumb.</p>
<p>It&#8217;s a complement to doing things simply and taking shortcuts even when it&#8217;s tempting to overengineer and build the perfect system.</p>
<p>This ugliness trick works for other things too. For example, the Wii Transfer product page is /software/wiitransfer/ instead of just /wiitransfer. I gave this URL more thought and second-guessing than it deserved, and every time I type /software/ or see the link I cringe a little. But I did it for a purpose: one day I hope to sell or promote things other than software. For example, when I registered riverfold.com I was working on an independent animated film which I planned to sell on DVD direct to customers. (I&#8217;ve had that shelved for years now, though, as I&#8217;ve recently discovered there are only 24 hours in a day.)</p>
<p>Others will say that you shouldn&#8217;t mix such different projects under the same brand, and that makes a lot of sense. But I also know it to be true that if you want to build a strong blog following, you should stick to one subject and become a respected voice in that field, and I didn&#8217;t do that either. I made a conscious decision with my personal blog to keep it loose and cover several different things that I am passionate about, and because of that I&#8217;ll likely never have tens of thousands of readers as other popular Mac development blogs have.</p>
<p>So maybe one day Riverfold will sell something other than Mac software. When that time comes, it won&#8217;t matter what the URLs are, but until then, the /software/ URL won&#8217;t let me ever forget that I have other things in mind.</p>
]]></content:encoded>
			</item>
		<item>
		<title>Learning from Rails design</title>
		<link>http://www.manton.org/2007/06/learning_from_rails.html</link>
		<pubDate>Mon, 04 Jun 2007 05:46:43 +0000</pubDate>
		<dc:creator><![CDATA[manton]]></dc:creator>
				<category><![CDATA[Programming]]></category>
		<category><![CDATA[lua]]></category>
		<category><![CDATA[objc]]></category>
		<category><![CDATA[urls]]></category>
		<category><![CDATA[wiitransfer]]></category>

		<guid isPermaLink="false">http://www.manton.org/2007/06/learning_from_rails.html</guid>
		<description><![CDATA[Since version 2.0, &#8220;Wii Transfer&#8221;:http://www.riverfold.com/software/wiitransfer/ has had a built-in web server for serving music and photos to the Nintendo Wii. The server was written in Cocoa and the code became very unwieldy as I continued to add features. Dozens of methods for processing different parts of the URL, and many if statements for conditionally branching [&#8230;]]]></description>
				<content:encoded><![CDATA[<p>Since version 2.0, &#8220;Wii Transfer&#8221;:http://www.riverfold.com/software/wiitransfer/ has had a built-in web server for serving music and photos to the Nintendo Wii. The server was written in Cocoa and the code became very unwieldy as I continued to add features. Dozens of methods for processing different parts of the URL, and many if statements for conditionally branching based on the URL, splitting the URL parameters, and more.</p>
<p>The code looked something like this (only worse):</p>
<pre><code>

if (path startsWithSubstring:@"/albums") {

[self processAlbumsRequest:path];

}

else if (path startsWithSubstring:@"/artists") {

[self processArtistsRequest:path];

}

else {

// ...

}

(void) processAlbumsRequest:(NSString *)inPath

{

// split out the parameters and request extensions from the URL path

// ...

if ([e isEqualToString:"xml"]) {

// ...

}

else if ([e isEqualToString:"html"]) {

// ...

}

}

</code></pre>
<p>Multiply that times 10 for all the different URLs that Wii Transfer knows how to process, and you can see how it worked fine for a couple simple things, but quickly became a mess as I added features.</p>
<p>For the upcoming version 2.3, I redesigned most of the URLs to follow a common structure, patterned after the default URL syntax that Rails uses: /controller/action/id. Now, instead of if statements, I dynamically route the URL requests using NSSelectorFromString() and performSelector:withObject:.</p>
<p>Consider this code (as above, simplified from the real thing):</p>
<pre><code>

// extract the values from /controller/action/id URLs

NSArray* pieces = [[path stringByDeletingPathExtension] pathComponents];

NSString* controller = [pieces objectAtIndex:1];

NSString* action = [pieces objectAtIndex:2];

NSString* param_id = [pieces objectAtIndex:3];

// call a method named controller_action, passing it the id

NSString* sel_name = [NSString stringWithFormat:@"%@_%@:", controller, action];

SEL method = NSSelectorFromString (sel_name);

[self performSelector:method withObject:param_id];

</code></pre>
<p>Now if I need to invent a new URL, say &#8220;/tracks/play/1234.mp3&#8221;, all I have to do is write the implementation for that method:</p>
<pre><code>

- (void) tracks_play:(NSString *)inParamID

{

// ...

}

</code></pre>
<p>The web request calls through to this new method without any additional glue code, in this case passing &#8220;1234&#8221; in the single parameter.</p>
<p>(The underscored method signatures aren&#8217;t very Cocoa-ish, but this is actually a plus because I can quickly spot the chunk of the controller that processes a set of requests, and I like that they read just like the URLs. I&#8217;m also currently using a single controller instead of having separate controller objects for the different types of requests, but I may expand that later.)</p>
<p>This convention has also allowed me to simplify all the URLs that Wii Transfer uses. Other examples include &#8220;/covers/search/U2&#8221; or &#8220;/artists/show/5&#8221;. I&#8217;ve eliminated a bunch of code, and it fits nicely with how I serve application resources and the start of a HTML template system.</p>
<p>Could it be taken further? Sure. I remember in the Mac OS 9 days building a web interface for a product using only compiled AppleScript scripts stored in the resource fork. Lately, folks like &#8220;Gus Mueller&#8221;:http://gusmueller.com/blog/ and Adobe&#8217;s Lightroom team have been doing interesting things with &#8220;embedding Lua&#8221;:http://www.sqlabs.net/blog/2006/01/adobe-lightroom-and-lua.html. I don&#8217;t want that level of extensibility yet, but it seems like a logical next generation when I outgrow even this new web architecture in Wii Transfer.</p>
]]></content:encoded>
			</item>
	</channel>
</rss>

<!-- Dynamic page generated in 0.460 seconds. -->
<!-- Cached page generated by WP-Super-Cache on 2016-12-13 17:00:28 -->
